/&bySearch&200&Search():::ENTER;input.y > input.page;daikon.inv.binary.twoScalar.IntGreaterThan;(input.y, input.page)
/&bySearch&200&Search():::EXIT;input.type == return.Type;daikon.inv.binary.twoString.StringEqual;(input.type, return.Type)
/&bySearch&200&Search():::EXIT;return.Type one of { "game", "movie", "series" };daikon.inv.unary.string.OneOfString;(return.Type)
/&bySearch&200&Search():::EXIT;return.Poster is Url;daikon.inv.unary.string.IsUrl;(return.Poster)
/&bySearch&200&Search():::EXIT;input.y > input.page;daikon.inv.binary.twoScalar.IntGreaterThan;(input.y, input.page)
/&bySearch&200():::EXIT;return.Response == "True";daikon.inv.unary.string.OneOfString;(return.Response)
/&bySearch&200():::EXIT;LENGTH(return.Response)==4;daikon.inv.unary.string.FixedLengthString;(return.Response)
/&bySearch&200():::EXIT;return.totalResults is Numeric;daikon.inv.unary.string.IsNumeric;(return.totalResults)
/&bySearch&200():::EXIT;input.y > size(return.Search[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.y, size(return.Search[..]))
