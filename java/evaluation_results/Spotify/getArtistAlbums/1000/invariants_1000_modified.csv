main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.type == "artist";daikon.inv.unary.string.OneOfString;(return.type)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri)
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height == return.width;daikon.inv.binary.twoScalar.IntEqual;(return.height, return.width)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height one of { 64, 300, 640 };daikon.inv.unary.scalar.OneOfScalar;(return.height)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;LENGTH(return.url)==64;daikon.inv.unary.string.FixedLengthString;(return.url)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.height)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.height)
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height > size(input.include_groups[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.height, size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.album_type one of { "album", "compilation", "single" };daikon.inv.unary.string.OneOfString;(return.album_type)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..])
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.type == "album";daikon.inv.unary.string.OneOfString;(return.type)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.release_date_precision one of { "day", "month", "year" };daikon.inv.unary.string.OneOfString;(return.release_date_precision)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks >= 1;daikon.inv.unary.scalar.LowerBound;(return.total_tracks)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.images[]) one of { 1, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(return.images[..]))
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]))
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.album_group in input.include_groups[];daikon.inv.binary.sequenceString.MemberString;(input.include_groups[..], return.album_group)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri)
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input.limit >= 1;daikon.inv.unary.scalar.LowerBound;(input.limit)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit >= 1;daikon.inv.unary.scalar.LowerBound;(input.limit)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]))
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]))
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous)
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]))
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]))
