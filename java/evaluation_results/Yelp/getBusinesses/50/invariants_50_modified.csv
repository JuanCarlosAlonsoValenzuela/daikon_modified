/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200&businesses():::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200&businesses():::ENTER;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
/businesses/search&getBusinesses&200&businesses():::EXIT;LENGTH(return.image_url)==68;daikon.inv.unary.string.FixedLengthString;(return.image_url)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.image_url is Url;daikon.inv.unary.string.IsUrl;(return.image_url)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.is_closed == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_closed)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.phone is Numeric;daikon.inv.unary.string.IsNumeric;(return.phone)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.review_count >= 1;daikon.inv.unary.scalar.LowerBound;(return.review_count)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.transactions[] elements one of { "delivery", "pickup", "restaurant_reservation" };daikon.inv.unary.stringsequence.EltOneOfString;(return.transactions[..])
/businesses/search&getBusinesses&200&businesses():::EXIT;LENGTH(return.location.country)==2;daikon.inv.unary.string.FixedLengthString;(return.location.country)
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;size(return.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;size(return.location.display_address[]) >= 2;daikon.inv.unary.scalar.LowerBound;(size(return.location.display_address[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > return.review_count;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.review_count)
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.transactions[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.radius > size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.location.display_address[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.limit >= size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.limit >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.transactions[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;return.coordinates.latitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.latitude, return.distance)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.coordinates.longitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.longitude, return.distance)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.distance > return.rating;daikon.inv.binary.twoScalar.FloatGreaterThan;(return.distance, return.rating)
/businesses/search&getBusinesses&200&businesses():::EXIT;return.review_count >= size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.attributes[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;return.review_count > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.review_count, size(return.transactions[..]))
/businesses/search&getBusinesses&200&businesses():::EXIT;return.location.address1 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address1, return.location.display_address[..])
/businesses/search&getBusinesses&200&businesses():::EXIT;return.location.address2 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address2, return.location.display_address[..])
/businesses/search&getBusinesses&200&businesses():::EXIT;return.location.address3 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address3, return.location.display_address[..])
/businesses/search&getBusinesses&200():::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200():::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
/businesses/search&getBusinesses&200():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200():::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200():::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200():::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200():::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200():::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200():::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200():::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
/businesses/search&getBusinesses&200():::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total)
/businesses/search&getBusinesses&200():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
/businesses/search&getBusinesses&200():::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
/businesses/search&getBusinesses&200():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
/businesses/search&getBusinesses&200():::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit)
/businesses/search&getBusinesses&200():::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset)
/businesses/search&getBusinesses&200():::EXIT;input.radius > return.total;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.total)
/businesses/search&getBusinesses&200():::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]))
/businesses/search&getBusinesses&200():::EXIT;input.radius > size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.businesses[..]))
/businesses/search&getBusinesses&200():::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]))
/businesses/search&getBusinesses&200():::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
/businesses/search&getBusinesses&200():::EXIT;input.limit >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.businesses[..]))
/businesses/search&getBusinesses&200():::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
/businesses/search&getBusinesses&200():::EXIT;return.total >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.businesses[..]))
